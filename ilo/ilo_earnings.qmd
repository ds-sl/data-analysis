---
title: "ILO"
author: "H.Suzuki"
format: html
editor: visual
---

## ILOSTAT

-   Website: <https://ilostat.ilo.org/data/>

    -   検索をすると、ILOSTAT Explorer が立ち上がります。

    -   例：**Average monthly earnings of employees by sex and economic activity \-- Annual - [ILOSTAT Explorer](https://www.ilo.org/shinyapps/bulkexplorer9/?lang=en&id=EAR_4MTH_SEX_ECO_CUR_NB_A)**

-   R パッケージ　Rilostat

    -   CRAN パッケージサイト：<https://cran.r-project.org/web/packages/Rilostat/index.html>

        -   Rilostat: ILO Open Data via Ilostat Bulk Download Facility or SDMX Web Service

        -   マニュアル [Manual](https://cran.r-project.org/web/packages/Rilostat/Rilostat.pdf)

    -   活用例 Vignettes: <https://ilostat.github.io/Rilostat/articles/Rilostat.html>

        -   基本的な機能 Essential Functionality

## 例：実質賃金（EAR_4MTH_SEX_ECO_CUR_NB_A）

```{r eval = FALSE}
install.packages("Rilostat")　# 最初に一度だけインストール
```

```{r}
library(tidyverse)
library(Rilostat)
```

検索を wage でしてみるがどうも、十分現れない。

```{r}
get_ilostat_toc(search = 'wage')
```

earnings で検索すると、現れる。検索の仕方は検討する必要がある。

```{r}
get_ilostat_toc(search = 'earnings')
```

id がわかっていればその一部を入れて検索も可能。

```{r}
get_ilostat_toc(search = 'EAR_4MTH')
```

データをダウンロード

EAR_4MTH_SEX_ECO_CUR_NB_A: Average monthly earnings of employees by sex and economic activity

```{r}
df_ilo_wages <- get_ilostat("EAR_4MTH_SEX_ECO_CUR_NB_A", cache = FALSE)
```

```{r}
write_csv(df_ilo_wages, "./data/df_ilo_wages.csv")
```

```{r}
df_ilo_wages <- read_csv("./data/df_ilo_wages.csv")
```

見てみる

ダウンロードしたファイルでは、time は、Chr になっているが、一旦保存し、read_csv で読み込むと、すでに、Dbl になっている。

```{r}
df_ilo_wages
```

それぞれ、どのような値があるか、カテゴリカルな列のみみてみる。

```{r}
df_ilo_wages |> filter(ref_area == "JPN", time == 2020) |> 
  select(1:6) |> lapply(unique)
```

classif1 と classif2 の意味を確認する必要があるので、辞書機能を使って、みてみる。

```{r}
get_ilostat_dic("classif1") |> filter(grepl("ECO", classif1))
```

```{r}
get_ilostat_dic("classif2") |> filter(grepl("CUR", classif2))
```

一応、ECO_AGGREGATE_TOTAL と、CUR_TYPE_PPP を指標にとり、グラフを書いてみる。year が 文字列になっている部分のみ修正。

```{r}
df_ilo_wages |> filter(classif1 == "ECO_AGGREGATE_TOTAL", classif2 == "CUR_TYPE_PPP", ref_area == "JPN") |> mutate(time = as.numeric(time)) |> 
  ggplot(aes(time, obs_value, color = sex)) + geom_line()
```

他の国の状況もみてみる。

```{r}
df_ilo_wages |> filter(ref_area %in% c("JPN", "GBR", "DEU", "USA", "CHN")) |> 
  filter(sex == "SEX_T") |> 
  filter(classif1 == "ECO_AGGREGATE_TOTAL", classif2 == "CUR_TYPE_PPP") |> 
  mutate(time = as.numeric(time)) |> 
  ggplot(aes(time, obs_value, color = ref_area)) + geom_line()
```

### Import Data with an Option

type = "both" とすると、指標の内容も書かれていて、get_ilostat_dic() を使わなくて良いが、余分なものが多くて見にくい面もある。 

```{r}
df_ilo_wages_both <- get_ilostat("EAR_4MTH_SEX_ECO_CUR_NB_A", type = "both", cache = FALSE)
df_ilo_wages_both
```

```{r}
colnames(df_ilo_wages_both)
```

```{r}
colnames(df_ilo_wages)
```

### labor share of income

```{r}
get_ilostat_toc(search = 'income')
```

```{r}
id_income <- get_ilostat_toc(search = 'income') |> pull(id) |> unique()
id_income
```

SDG_1041_NOC_RT_A: SDG indicator 10.4.1 - Labour income share as a percent of GDP (%)

```{r}
df_sdg_lis <- get_ilostat("SDG_1041_NOC_RT_A", cache = FALSE) |> 
  mutate(time = as.numeric(time))
df_sdg_lis
```

LAP_2LID_QTL_RT_A: Labour income share as a percent of GDP -- ILO modelled estimates, Nov. 2021 (%)

```{r}
df_income_dist <- get_ilostat("LAP_2LID_QTL_RT_A", cache = FALSE) |> 
  mutate(time = as.numeric(time))
df_income_dist
```

LAP_2LID_QTL_RT_A: Labour income distribution -- ILO modelled estimates, Nov. 2021 (%)

```{r}
df_labor_income_share <- get_ilostat("LAP_2GDP_NOC_RT_A", cache = FALSE) |> 
  mutate(time = as.numeric(time))
df_labor_income_share
```

LAP_2FTM_NOC_RT_A: Gender income gap, ratio of women's to men's labour income -- ILO modelled estimates, Nov. 202

```{r}
df_gender_income_gap <- get_ilostat("LAP_2GDP_NOC_RT_A", cache = FALSE) |> 
  mutate(time = as.numeric(time))
df_gender_income_gap
```
4つの指標一度に取ることも可能。

```{r}
df_income <- get_ilostat(c("SDG_1041_NOC_RT_A", "LAP_2GDP_NOC_RT_A", "LAP_2LID_QTL_RT_A", "LAP_2FTM_NOC_RT_A"), cache = FALSE) |> 
  mutate(time = as.numeric(time))
df_income
```

```{r}
df_income$indicator |> unique()
```

```{r}
id_income
```

```{r}
df_income |> filter(ref_area == "JPN", time == 2020) |> select(2,3,4,7) |>
  lapply(unique)
```

```{r}
get_ilostat_dic("classif1") |> filter(grepl("QTL_DECILE", classif1))
```

